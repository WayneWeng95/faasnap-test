---
swagger: "2.0"
info:
  description: "FaaSnap API"
  version: "1.0.0"
  title: "faasnap"
host: "localhost:8080"
basePath: "/"
schemes:
- "http"
paths:
  /ui:
    get:
      description: "UI"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "ok"
  /ui/data:
    get:
      description: "UI"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "ok"
  /metrics:
    get:
      description: "Metrics"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "ok"
  /functions:
    get:
      description: "Return a list of functions"
      parameters: []
      responses:
        "200":
          description: "List of functions"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Function"
    post:
      description: "Create a new function"
      parameters:
      - in: "body"
        name: "function"
        required: false
        schema:
          $ref: "#/definitions/Function"
        x-exportParamName: "Function"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /vms:
    get:
      description: "Returns a list of active VMs"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VM"
    post:
      description: "Create a new VM"
      parameters:
      - in: "body"
        name: "VM"
        required: false
        schema:
          $ref: "#/definitions/VM_1"
        x-exportParamName: "VM"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VM"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /vms/{vmId}:
    get:
      description: "Describe a VM"
      parameters:
      - name: "vmId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VmId"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VM"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
    delete:
      description: "Stop a VM"
      parameters:
      - name: "vmId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "VmId"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /vmms:
    post:
      description: "Create a VMM in the pool"
      parameters:
      - in: "body"
        name: "VMM"
        required: false
        schema:
          $ref: "#/definitions/VMM"
        x-exportParamName: "VMM"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VM"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /snapshots:
    post:
      description: "Take a snapshot"
      parameters:
      - in: "body"
        name: "snapshot"
        required: false
        schema:
          $ref: "#/definitions/Snapshot"
        x-exportParamName: "Snapshot"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Snapshot"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
    put:
      description: "Put snapshot (copy)"
      parameters:
      - name: "from_snapshot"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "FromSnapshot"
      - name: "mem_file_path"
        in: "query"
        required: true
        type: "string"
        x-exportParamName: "MemFilePath"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Snapshot"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /snapshots/{ssId}:
    patch:
      description: "Change snapshot state"
      parameters:
      - name: "ssId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SsId"
      - in: "body"
        name: "state"
        required: false
        schema:
          $ref: "#/definitions/state"
        x-exportParamName: "State"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /snapshots/{ssId}/mincore:
    get:
      description: "Get mincore state"
      parameters:
      - name: "ssId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SsId"
      responses:
        "200":
          description: "Mincore state"
          schema:
            $ref: "#/definitions/inline_response_200"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
    post:
      description: "Add mincore layer"
      parameters:
      - name: "ssId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SsId"
      - in: "body"
        name: "layer"
        required: true
        schema:
          $ref: "#/definitions/layer"
        x-exportParamName: "Layer"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
    put:
      description: "Put mincore state"
      parameters:
      - name: "ssId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SsId"
      - name: "source"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Source"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
    patch:
      description: "Change mincore state"
      parameters:
      - name: "ssId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SsId"
      - in: "body"
        name: "state"
        required: true
        schema:
          $ref: "#/definitions/state_1"
        x-exportParamName: "State"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /snapshots/{ssId}/reap:
    get:
      description: "get reap state"
      parameters:
      - name: "ssId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SsId"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
    delete:
      description: "delete reap state"
      parameters:
      - name: "ssId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SsId"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
    patch:
      description: "Change reap state"
      parameters:
      - name: "ssId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "SsId"
      - in: "body"
        name: "cache"
        required: false
        schema:
          type: "boolean"
        x-exportParamName: "Cache"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /net-ifaces/{namespace}:
    put:
      description: "Put a vm network"
      parameters:
      - name: "namespace"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Namespace"
      - in: "body"
        name: "interface"
        required: false
        schema:
          $ref: "#/definitions/interface"
        x-exportParamName: "Interface_"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
  /invocations:
    post:
      description: "Post an invocation"
      parameters:
      - in: "body"
        name: "invocation"
        required: false
        schema:
          $ref: "#/definitions/Invocation"
        x-exportParamName: "Invocation"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/inline_response_200_1"
        "400":
          description: "Invalid request"
          schema:
            $ref: "#/definitions/inline_response_400"
definitions:
  Function:
    type: "object"
    required:
    - "func_name"
    properties:
      func_name:
        type: "string"
      image:
        type: "string"
      kernel:
        type: "string"
      vcpu:
        type: "integer"
      mem_size:
        type: "integer"
    example:
      image: "image"
      vcpu: 0
      kernel: "kernel"
      mem_size: 6
      func_name: "func_name"
  VM:
    type: "object"
    required:
    - "vmId"
    properties:
      vmId:
        type: "string"
      state:
        type: "string"
      vmConf:
        type: "object"
        properties: {}
      vmPath:
        type: "string"
    example:
      vmConf: "{}"
      vmId: "vmId"
      state: "state"
      vmPath: "vmPath"
  Snapshot:
    type: "object"
    required:
    - "vmId"
    properties:
      vmId:
        type: "string"
      ssId:
        type: "string"
      snapshot_type:
        type: "string"
      snapshot_path:
        type: "string"
      mem_file_path:
        type: "string"
      version:
        type: "string"
      record_regions:
        type: "boolean"
      size_threshold:
        type: "integer"
      interval_threshold:
        type: "integer"
    example:
      interval_threshold: 6
      mem_file_path: "mem_file_path"
      vmId: "vmId"
      snapshot_path: "snapshot_path"
      size_threshold: 0
      snapshot_type: "snapshot_type"
      record_regions: true
      version: "version"
      ssId: "ssId"
  Invocation:
    type: "object"
    required:
    - "func_name"
    properties:
      func_name:
        type: "string"
      vmId:
        type: "string"
      ssId:
        type: "string"
      params:
        type: "string"
      mincore:
        type: "integer"
      mincore_size:
        type: "integer"
      loadMincore:
        type: "array"
        items:
          type: "integer"
      use_mem_file:
        type: "boolean"
      overlay_regions:
        type: "boolean"
      use_ws_file:
        type: "boolean"
      vmm_load_ws:
        type: "boolean"
      enableReap:
        type: "boolean"
      wsFileDirectIo:
        type: "boolean"
      wsSingleRead:
        type: "boolean"
      namespace:
        type: "string"
  inline_response_400:
    type: "object"
    properties:
      message:
        type: "string"
  VM_1:
    type: "object"
    properties:
      func_name:
        type: "string"
      ssId:
        type: "string"
      namespace:
        type: "string"
  VMM:
    type: "object"
    properties:
      namespace:
        type: "string"
      enableReap:
        type: "boolean"
  state:
    type: "object"
    properties:
      dig_hole:
        type: "boolean"
      load_cache:
        type: "boolean"
      drop_cache:
        type: "boolean"
  inline_response_200:
    type: "object"
    properties:
      nlayers:
        type: "integer"
      n_nz_regions:
        type: "integer"
      nz_region_size:
        type: "integer"
      n_ws_regions:
        type: "integer"
      ws_region_size:
        type: "integer"
    example:
      nz_region_size: 1
      n_nz_regions: 6
      ws_region_size: 5
      nlayers: 0
      n_ws_regions: 5
  layer:
    type: "object"
    properties:
      position:
        type: "integer"
      fromDiff:
        type: "string"
  state_1:
    type: "object"
    properties:
      from_records_size:
        type: "integer"
      trim_regions:
        type: "boolean"
      to_ws_file:
        type: "string"
      inactive_ws:
        type: "boolean"
      zero_ws:
        type: "boolean"
      size_threshold:
        type: "integer"
      interval_threshold:
        type: "integer"
      mincore_cache:
        type: "array"
        items:
          type: "integer"
      drop_ws_cache:
        type: "boolean"
  interface:
    type: "object"
    properties:
      host_dev_name:
        type: "string"
      iface_id:
        type: "string"
      guest_mac:
        type: "string"
      guest_addr:
        type: "string"
      unique_addr:
        type: "string"
  inline_response_200_1:
    type: "object"
    properties:
      duration:
        type: "number"
      result:
        type: "string"
      vmId:
        type: "string"
      traceId:
        type: "string"
    example:
      duration: 0.8008281904610115
      result: "result"
      traceId: "traceId"
      vmId: "vmId"
responses:
  "400Error":
    description: "Invalid request"
    schema:
      $ref: "#/definitions/inline_response_400"
